name: File Handler - /V2/Flags.min.json

on:
  push:
    branches:
      - 'Main'
    paths:
      - 'V2/Flags.json'

run-name: Sync Flags.min.json with Flags.json

jobs:
  Run:
    name: Run
    runs-on: windows-latest
    timeout-minutes: 15
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      id-token: none
      issues: none
      discussions: none
      packages: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    if: github.actor == 'TheOneBOB'
    steps:
    - name: Clone Repository
      uses: actions/checkout@v3
    - name: Run
      shell: pwsh
      env:
        KEY: ${{ secrets.KEY }}
      run: |
        $WorkingFolder = $env:GITHUB_WORKSPACE
        $APIKey = $env:KEY
        
        $FlagsFilePath = Join-Path $WorkingFolder "/V2/Flags.json"
        $FlagsMinFilePath = Join-Path $WorkingFolder "/V2/Flags.min.json"
        
        $FlagsFileContent = Get-Content -LiteralPath $FlagsFilePath -Raw
        $FlagsMinFileNewContent = $FlagsFileContent | ConvertFrom-Json -Depth 100 -NoEnumerate | ConvertTo-Json -Depth 100 -Compress
        
        $Headers = @{
            "Accept" = "application/vnd.github+json";
            "Authorization" = "Bearer $APIKey";
            "X-GitHub-Api-Version" = "2022-11-28";
        }
        
        $BranchReference = Invoke-RestMethod -Method Get -Uri "https://api.github.com/repos/${{ github.repository }}/git/${{ github.ref }}" -Headers $Headers
        if ($BranchReference.object.type -ne "commit") {
            throw ('Unknown type "' + $BranchReference.object.type + '"')
        }
        $BranchCurrentCommit = Invoke-RestMethod -Method Get -Uri $BranchReference.object.url -Headers $Headers
        $BranchTree = Invoke-RestMethod -Method Get -Uri $BranchCurrentCommit.tree.url -Headers $Headers
        
        foreach ($Object in $BranchTree.tree) {
            if (($Object.type -eq "tree") -and ($Object.path -eq "V2")) {
                $SubFolderTreeSHA = $Object.sha
                break
            }
        }
        
        if ($SubFolderTreeSHA -ne $Null) {
            $SubFolderTree = Invoke-RestMethod -Method Get -Uri "https://api.github.com/repos/${{ github.repository }}/git/trees/$SubFolderTreeSHA" -Headers $Headers
            
            $Body = @{
                base_tree = $SubFolderTree.sha;
                tree = ,@{path = "Flags.min.json"; type = "blob"; mode = "100644"; content = $FlagsMinFileNewContent};
            } | ConvertTo-Json -Depth 100 -Compress
            $NewTree = Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/${{ github.repository }}/git/trees" -Body $Body -Headers $Headers
            
            $Body = @{
                base_tree = $BranchTree.sha;
                tree = ,@{path = "V2"; type = "tree"; mode = "040000"; sha = $NewTree.sha};
            } | ConvertTo-Json -Depth 100 -Compress
            $NewBranchTree = Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/${{ github.repository }}/git/trees" -Body $Body -Headers $Headers
            
            $Body = @{
                message = "Synced Flags.min.json with Flags.json`n`nUsed ${{ github.event.after }} as the base";
                author = @{name = "BOB"; email = "50222267+theonebob@users.noreply.github.com"};
                committer = @{name = "BDS's System"; email = "78413220+BOBDevStudioBot@users.noreply.github.com"};
                tree = $NewBranchTree.sha;
                parents = ,$BranchCurrentCommit.sha;
            } | ConvertTo-Json -Depth 100 -Compress
            $NewCommit = Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/${{ github.repository }}/git/commits" -Body $Body -Headers $Headers
            
            $Body = @{
                sha = $NewCommit.sha;
            } | ConvertTo-Json -Depth 100 -Compress
            $UnneededValue = Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/${{ github.repository }}/git/${{ github.ref }}" -Body $Body -Headers $Headers
        }